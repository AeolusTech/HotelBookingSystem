-- MySQL Script generated by MySQL Workbench
-- Tue Jun 13 23:14:26 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema HotelDatabase
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema HotelDatabase
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `HotelDatabase` DEFAULT CHARACTER SET utf8 ;
USE `HotelDatabase` ;

-- -----------------------------------------------------
-- Table `HotelDatabase`.`Users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`Users` (
  `idUsers` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NOT NULL,
  `password` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`idUsers`),
  UNIQUE INDEX `idUsers_UNIQUE` (`idUsers` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `HotelDatabase`.`Bookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`Bookings` (
  `idBookings` INT NOT NULL AUTO_INCREMENT,
  `start` DATE NOT NULL,
  `end` DATE NOT NULL,
  `Users_idUsers` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idBookings`),
  UNIQUE INDEX `idBookings_UNIQUE` (`idBookings` ASC),
  INDEX `fk_Bookings_Users_idx` (`Users_idUsers` ASC),
  CONSTRAINT `fk_Bookings_Users`
    FOREIGN KEY (`Users_idUsers`)
    REFERENCES `HotelDatabase`.`Users` (`idUsers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `HotelDatabase`.`Guests`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`Guests` (
  `idGuests` INT NOT NULL AUTO_INCREMENT,
  `nationality` VARCHAR(20) NOT NULL,
  `documentType` ENUM('Passport', 'DrivingLicense', 'ID') NOT NULL COMMENT 'should be dict table',
  `documentId` VARCHAR(20) NOT NULL,
  `name` VARCHAR(20) NOT NULL,
  `surname` VARCHAR(45) NOT NULL,
  `Bookings_idBookings` INT NOT NULL,
  PRIMARY KEY (`idGuests`, `Bookings_idBookings`),
  UNIQUE INDEX `idGuests_UNIQUE` (`idGuests` ASC),
  INDEX `fk_Guests_Bookings1_idx` (`Bookings_idBookings` ASC),
  CONSTRAINT `fk_Guests_Bookings1`
    FOREIGN KEY (`Bookings_idBookings`)
    REFERENCES `HotelDatabase`.`Bookings` (`idBookings`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `HotelDatabase`.`Rooms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`Rooms` (
  `number` INT NOT NULL,
  `roomType` ENUM('Jednoosobowy z lazienka', 'Jednoosobowy z lazienka dzielona', 'Dwuosobowy z lozkiem malzenskim', 'Dwuosobowy z dwoma oddzielnymi lozkami', 'Czteroosobowy z dwoma lozkami malzenskimi', 'Czteroosobowy - lozko malzenskie i dwa lozka pojedyncze', 'Apartament dwuosobowy z Jacuzzi', 'Apartament dwuosobowy z sauna', 'Apartament dwuosobowy z Jacuzzi i sauna') NOT NULL,
  `pricePerNight` INT NOT NULL,
  PRIMARY KEY (`number`),
  UNIQUE INDEX `idRooms_UNIQUE` (`number` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `HotelDatabase`.`Services`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`Services` (
  `idServices` INT NOT NULL AUTO_INCREMENT,
  `price` FLOAT UNSIGNED NOT NULL,
  `info` VARCHAR(45) NOT NULL,
  `Bookings_idBookings` INT NOT NULL,
  PRIMARY KEY (`idServices`, `Bookings_idBookings`),
  INDEX `fk_Services_Bookings1_idx` (`Bookings_idBookings` ASC),
  CONSTRAINT `fk_Services_Bookings1`
    FOREIGN KEY (`Bookings_idBookings`)
    REFERENCES `HotelDatabase`.`Bookings` (`idBookings`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `HotelDatabase`.`Fines`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`Fines` (
  `idFines` INT NOT NULL AUTO_INCREMENT,
  `info` VARCHAR(45) NOT NULL,
  `amount` INT NOT NULL,
  `date` DATE NOT NULL,
  `Bookings_idBookings` INT NOT NULL,
  PRIMARY KEY (`idFines`, `Bookings_idBookings`),
  UNIQUE INDEX `idFines_UNIQUE` (`idFines` ASC),
  INDEX `fk_Fines_Bookings1_idx` (`Bookings_idBookings` ASC),
  CONSTRAINT `fk_Fines_Bookings1`
    FOREIGN KEY (`Bookings_idBookings`)
    REFERENCES `HotelDatabase`.`Bookings` (`idBookings`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `HotelDatabase`.`Rooms_has_Bookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`Rooms_has_Bookings` (
  `Rooms_number` INT NOT NULL,
  `Bookings_idBookings` INT NOT NULL,
  PRIMARY KEY (`Rooms_number`, `Bookings_idBookings`),
  INDEX `fk_Rooms_has_Bookings_Bookings1_idx` (`Bookings_idBookings` ASC),
  INDEX `fk_Rooms_has_Bookings_Rooms1_idx` (`Rooms_number` ASC),
  CONSTRAINT `fk_Rooms_has_Bookings_Rooms1`
    FOREIGN KEY (`Rooms_number`)
    REFERENCES `HotelDatabase`.`Rooms` (`number`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Rooms_has_Bookings_Bookings1`
    FOREIGN KEY (`Bookings_idBookings`)
    REFERENCES `HotelDatabase`.`Bookings` (`idBookings`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `HotelDatabase` ;

-- -----------------------------------------------------
-- Placeholder table for view `HotelDatabase`.`howManyBookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`howManyBookings` (`count(*)` INT);

-- -----------------------------------------------------
-- Placeholder table for view `HotelDatabase`.`howManyRooms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`howManyRooms` (`count(*)` INT);

-- -----------------------------------------------------
-- Placeholder table for view `HotelDatabase`.`showFullBookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`showFullBookings` (`idBookings` INT, `Users_idUsers` INT, `number` INT, `start` INT, `end` INT, `roomType` INT, `pricePerNight` INT);

-- -----------------------------------------------------
-- Placeholder table for view `HotelDatabase`.`showRoomTypesAndPrices`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `HotelDatabase`.`showRoomTypesAndPrices` (`roomType` INT, `pricePerNight` INT);

-- -----------------------------------------------------
-- procedure sp_createUser
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_createUser`(
    IN p_email VARCHAR(45),
    IN p_password VARCHAR(32)
)	
BEGIN
	if ( select exists (select 1 from users where email = p_email) ) THEN
        select 'Email exists !!';
    ELSE
        insert into users
        (
            email,            
            password
        )
        values
        (
            p_email,
            p_password
        );
     
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_validateLogin
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_validateLogin`(
	IN p_email VARCHAR(45)
)
BEGIN
    select * from users where email = p_email;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_getAllBookings
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getAllBookings`()
BEGIN
	select * from showFullBookings;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_getAllUsers
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getAllUsers`()	
BEGIN
	select * from Users;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_createBooking
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_createBooking`(
    IN p_start date,
    IN p_end date,
    IN p_idUser int,
    IN p_roomNumber int
)	
BEGIN
	if ( select exists (select 1 from showFullBookings where start = p_start and end = p_end and number = p_roomNumber) ) THEN
		set @known_id = (select 1 from showFullBookings where start = p_start and end = p_end and number = p_roomNumber);
    else
		set @known_id=0;
	end if;
	if (select exists (select 1 from Rooms_has_bookings where rooms_number=p_roomNumber and Bookings_idBookings=@known_id)) then
		select 'Booking exists !!';
	else
    begin
		insert into `bookings` set `start`= p_start, `end`=p_end, `Users_idUsers`=p_idUser;
		SET @out_param = LAST_INSERT_ID();
		insert into `Rooms_has_bookings` set `Rooms_number`=p_roomNumber, `Bookings_idBookings` = @out_param;
	end;
    end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_showBusyRooms
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_showBusyRooms` (
	IN p_start DATE,
	IN p_end DATE
)
BEGIN
	select * from showFullBookings where ( start >= p_start and end <= p_end)
									  or ( start >= p_start and end >= p_end)
									  or ( start <= p_start and end >= p_end)
									  or ( start <= p_start and end >= p_start);
	-- select * from showFullBookings where ( start > p_start and end < p_end)
  								  -- or ( start > p_start and start < p_end)
  --                                    or ( start < p_start and end > p_end)
    --                                  or ( start < p_start and end > p_start);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_showVacantRooms
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_showVacantRooms` (
	IN p_start DATE,
	IN p_end DATE
)
BEGIN
	drop table if exists t1;
	create table t1
		select * from showFullBookings where ( start >= p_start and end <= p_end)
										  or ( start >= p_start and end >= p_end)
										  or ( start <= p_start and end >= p_end)
										  or ( start <= p_start and end >= p_start);
	drop table if exists helper_VacantRoomsTable;
	create table helper_VacantRoomsTable
		SELECT Rooms.number, Rooms.roomType
		FROM Rooms
		LEFT JOIN t1
		  ON Rooms.number= t1.number
		WHERE t1.number IS NULL
		UNION
		SELECT t1.number, t1.roomType
		FROM t1
		LEFT JOIN Rooms
		  ON Rooms.number = t1.number
		WHERE Rooms.number IS NULL;
    
    select distinct(helper_VacantRoomsTable.roomType) from helper_VacantRoomsTable;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_getBookingsForUser
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getBookingsForUser`(
    IN p_idUser int
)	
BEGIN
	select * from showFullBookings where Users_idUsers = p_idUser;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_getAllGuests
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getAllGuests`()	
BEGIN
	select * from Guests;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_createGuest
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_createGuest`(
	IN p_name VARCHAR(20),
    IN p_surname VARCHAR(45),
	IN p_nationality VARCHAR(20),
    IN p_documentType VARCHAR(20),
    IN p_documentId VARCHAR(20),
    IN p_bookingsId INT
)	
BEGIN
	if ( select exists (select 1 from guests where name = p_name and surname = p_surname and
		documentId = p_documentId and documentType = p_documentType and Bookings_idBookings = p_bookingsId) ) THEN
        select 'Guest exists !!';
    ELSE
        insert into Guests
        (
            nationality,
            documentType,
            documentId,
            name,
            surname,
            Bookings_idBookings
        )
        values
        (
            p_nationality,
            p_documentType,
            p_documentId,
            p_name,
            p_surname,
            p_bookingsId
        );
     
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createRooms
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE PROCEDURE `createRooms` ()
BEGIN
	-- ENUM('Jednoosobowy z lazienka', 'Jednoosobowy z lazienka dzielona', 'Dwuosobowy z lozkiem malzenskim',
    -- 'Dwuosobowy z dwoma oddzielnymi lozkami', 'Czteroosobowy z dwoma lozkami malzenskimi',
    -- 'Czterosobowy - lozko malzenskie i dwa lozka pojedyncze', 'Apartament dwuosobowy z Jacuzzi',
    -- 'Apartament dwuosobowy z sauna', 'Apartament dwuoosobwy z Jacuzzi i sauna')
    set @priceJednoosobowyZLazienkaDzielona = 25;
    set @priceJednoosobowyZLazienka = 30;
    set @priceDwuosobowyZLozkiemMalzenskim = 40;
    set @priceDwuosobowyZDwomaOddzielnymiLozkami = 50;
    set @priceCzteroosobowyZDwomaLozkamiMalzenskimi = 65;
    set @priceCzteroosobowyLozkoMalzenskieDwaLozkaPojedyncze = 75;
    set @priceApartamentDwuosobowyJacuzzi = 150;
    set @priceApartamentDwuosobowySauna = 160;
    set @priceApartamentDwuosobowyJacuzziSauna = 250;
    set @x = 0;
    loop_label: LOOP
		insert into rooms value(100 + @x, 'Jednoosobowy z lazienka', @priceJednoosobowyZLazienka);
        insert into rooms value(120 + @x, 'Jednoosobowy z lazienka dzielona', @priceJednoosobowyZLazienkaDzielona);
        insert into rooms value(140 + @x, 'Dwuosobowy z lozkiem malzenskim', @priceDwuosobowyZLozkiemMalzenskim);
        insert into rooms value(200 + @x, 'Dwuosobowy z dwoma oddzielnymi lozkami', @priceDwuosobowyZDwomaOddzielnymiLozkami);
        SET @x = @x + 1;
        if @x = 10
        then
			leave loop_label;
		end if;
	END LOOP;
    
    set @x = 0;
    loop_label2: LOOP
		insert into rooms value(220 + @x, 'Czteroosobowy z dwoma lozkami malzenskimi', @priceCzteroosobowyZDwomaLozkamiMalzenskimi);
        insert into rooms value(240 + @x, 'Czteroosobowy - lozko malzenskie i dwa lozka pojedyncze', @priceCzteroosobowyLozkoMalzenskieDwaLozkaPojedyncze);
        insert into rooms value(300 + @x, 'Apartament dwuosobowy z Jacuzzi', @priceApartamentDwuosobowyJacuzzi);
        insert into rooms value(310 + @x, 'Apartament dwuosobowy z sauna', @priceApartamentDwuosobowySauna);
        insert into rooms value(320 + @x, 'Apartament dwuosobowy z Jacuzzi i sauna', @priceApartamentDwuosobowyJacuzziSauna);
        SET @x = @x + 1;
        if @x = 2
        then
			leave loop_label2;
		end if;
	END LOOP;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_getFirstFreeRoom
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getFirstFreeRoom` (
	IN p_roomType VARCHAR(100)
)
BEGIN
	-- the table helper_VacantRoomsTable is always created before calling this procedure in sp_showVacantRooms
	select number from helper_VacantRoomsTable where roomType=p_roomType limit 1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_deleteBooking
-- -----------------------------------------------------

DELIMITER $$
USE `HotelDatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_deleteBooking`(
    IN p_id int
)	
BEGIN
	delete from Rooms_has_bookings where Bookings_idBookings = p_id;
    delete from Bookings where idBookings = p_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `HotelDatabase`.`howManyBookings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HotelDatabase`.`howManyBookings`;
USE `HotelDatabase`;
CREATE  OR REPLACE VIEW `howManyBookings` AS
	select count(*) from Bookings;

-- -----------------------------------------------------
-- View `HotelDatabase`.`howManyRooms`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HotelDatabase`.`howManyRooms`;
USE `HotelDatabase`;
CREATE  OR REPLACE VIEW `howManyRooms` AS
	Select count(*) from rooms;

-- -----------------------------------------------------
-- View `HotelDatabase`.`showFullBookings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HotelDatabase`.`showFullBookings`;
USE `HotelDatabase`;
CREATE  OR REPLACE VIEW `showFullBookings` AS
select
	bookings.idBookings,
    bookings.Users_idUsers,
    rooms.number,
    bookings.start,
    bookings.end,
    rooms.roomType,
    rooms.pricePerNight
from bookings
join Rooms_has_bookings on bookings.idBookings = rooms_has_bookings.bookings_idBookings
join rooms on rooms.number = rooms_has_bookings.rooms_number;

-- -----------------------------------------------------
-- View `HotelDatabase`.`showRoomTypesAndPrices`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HotelDatabase`.`showRoomTypesAndPrices`;
USE `HotelDatabase`;
CREATE  OR REPLACE VIEW `showRoomTypesAndPrices` AS
	select distinct(rooms.roomType), rooms.pricePerNight from rooms;
USE `HotelDatabase`;

DELIMITER $$
USE `HotelDatabase`$$
CREATE TRIGGER `trg_entity_email_insert` BEFORE INSERT ON `Users` FOR EACH ROW

BEGIN
    IF NOT (SELECT NEW.email REGEXP '^[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$') THEN
        -- bad data
        SIGNAL SQLSTATE '40000';
    END IF;
END$$

USE `HotelDatabase`$$
CREATE TRIGGER `trg_entity_email_update` BEFORE UPDATE ON `Users` FOR EACH ROW

BEGIN
    IF NOT (SELECT NEW.email REGEXP '^[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$') THEN
        -- bad data
         SIGNAL SQLSTATE '40000';
    END IF;
END$$

USE `HotelDatabase`$$
CREATE DEFINER = CURRENT_USER TRIGGER `HotelDatabase`.`Guests_BEFORE_INSERT` BEFORE INSERT ON `Guests` FOR EACH ROW
BEGIN
	SET NEW.name = CONCAT(UCASE(LEFT(New.name, 1)), 
								 LCASE(SUBSTRING(New.name, 2)));
	SET NEW.surname = CONCAT(UCASE(LEFT(New.surname, 1)), 
								 LCASE(SUBSTRING(New.surname, 2)));							 
END$$


DELIMITER ;
CREATE USER 'admin' IDENTIFIED BY 'user1';

GRANT ALL ON `HotelDatabase`.* TO 'admin';
GRANT SELECT, INSERT, TRIGGER ON TABLE `HotelDatabase`.* TO 'admin';
CREATE USER 'user' IDENTIFIED BY 'bazydanych2017';

GRANT SELECT, INSERT, TRIGGER ON TABLE `HotelDatabase`.* TO 'user';
GRANT DELETE, INSERT, SELECT ON TABLE `HotelDatabase`.`Bookings` TO 'user';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `HotelDatabase`.`Users` TO 'user';
CREATE USER 'staff' IDENTIFIED BY 'bazydanych2017';

GRANT SELECT, INSERT, TRIGGER ON TABLE `HotelDatabase`.* TO 'staff';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `HotelDatabase`.`Fines` TO 'staff';
GRANT INSERT, SELECT, UPDATE, DELETE ON TABLE `HotelDatabase`.`Bookings` TO 'staff';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `HotelDatabase`.`Guests` TO 'staff';
GRANT SELECT ON TABLE `HotelDatabase`.`Rooms` TO 'staff';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `HotelDatabase`.`Services` TO 'staff';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `HotelDatabase`.`Users` TO 'staff';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
